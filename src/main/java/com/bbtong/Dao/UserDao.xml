<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bbtong.Dao.UserDao">
    <resultMap id="BaseResultMap" type="com.bbtong.Pojo.User">
        <id column="User_Id" jdbcType="INTEGER" property="userId"/>
        <result column="User_Name" jdbcType="VARCHAR" property="userName"/>
        <result column="User_Nickname" jdbcType="VARCHAR" property="userNickname"/>
        <result column="Insurance_Company_Name" jdbcType="VARCHAR" property="insuranceCompanyName"/>
        <result column="Insurance_Company_Id" jdbcType="INTEGER" property="insuranceCompanyId"/>
        <result column="User_Integrity" jdbcType="DOUBLE" property="userIntegrity"/>
        <result column="User_Member_State" jdbcType="INTEGER" property="userMemberState"/>
        <result column="User_ Member_Begin" jdbcType="VARCHAR" property="userMemberBegin"/>
        <result column="User_ Member_Finish" jdbcType="VARCHAR" property="userMemberFinish"/>
        <result column="User_Phone" jdbcType="VARCHAR" property="userPhone"/>
        <result column="User_Identity_Card" jdbcType="VARCHAR" property="userIdentityCard"/>
        <result column="User_Identity_Card_Front" jdbcType="VARCHAR" property="userIdentityCardFront"/>
        <result column="User_Identity_Card_Verso" jdbcType="VARCHAR" property="userIdentityCardVerso"/>
        <result column="User_Satisfaction" jdbcType="INTEGER" property="userSatisfaction"/>
        <result column="User_OpenId" jdbcType="VARCHAR" property="userOpenid"/>
        <result column="User_State" jdbcType="INTEGER" property="userState"/>
        <result column="User_Entrust_number" jdbcType="INTEGER" property="userEntrustNumber"/>
        <result column="User_Order_numer" jdbcType="INTEGER" property="userOrderNumer"/>
        <result column="User_Entrust_Money" jdbcType="DOUBLE" property="userEntrustMoney"/>
        <result column="User_order_Money" jdbcType="DOUBLE" property="userOrderMoney"/>
        <result column="User_Number" jdbcType="VARCHAR" property="userNumber"/>
        <result column="User_Pact" jdbcType="INTEGER" property="userPact"/>
        <result column="User_Order_State" jdbcType="INTEGER" property="userOrderState"/>
        <result column="User_tietong" jdbcType="INTEGER" property="userTietong"/>
        <result column="User_Address" jdbcType="VARCHAR" property="userAddress"/>
        <result column="Tietong_Number" jdbcType="VARCHAR" property="tietongNumber"/>
        <result column="Intention_State" jdbcType="INTEGER" property="intentionState"/>
        <result column="test_state" jdbcType="INTEGER" property="testState"/>
    </resultMap>

    <!--用户注册的方法-->
    <resultMap id="BasePostUser" type="com.bbtong.Base.PostUser">
        <id column="User_Id" jdbcType="INTEGER" property="userId"/>
        <result column="User_Name" jdbcType="VARCHAR" property="userName"/>
        <result column="User_Nickname" jdbcType="VARCHAR" property="userNickname"/>
        <result column="Insurance_Company_Id" jdbcType="INTEGER" property="insuranceCompanyId"/>
        <result column="User_Phone" jdbcType="VARCHAR" property="userPhone"/>
        <result column="User_Number" jdbcType="VARCHAR" property="userNumber"/>
        <result column="User_tietong" jdbcType="INTEGER" property="userTietong"/>
        <result column="User_Address" jdbcType="VARCHAR" property="userAddress"/>
        <result column="User_Identity_Card" jdbcType="VARCHAR" property="userIdentityCard"/>
    </resultMap>

    <!--用户查询我的好友，显示的依赖-->
    <resultMap id="BaseFriend" type="com.bbtong.Pojo.Friend">
        <id column="Friend_Id" jdbcType="INTEGER" property="friendId"/>
        <result column="User_Id" jdbcType="INTEGER" property="userId"/>
        <result column="Friend_User_Id" jdbcType="INTEGER" property="friendUserId"/>
        <result column="Friend_Remark" jdbcType="VARCHAR" property="friendRemark"/>
        <result column="Friend_Name" jdbcType="VARCHAR" property="friendName"/>
        <result column="Friend_phone" jdbcType="VARCHAR" property="friendPhone"/>
        <result column="Friend_Company_Name" jdbcType="VARCHAR" property="friendCompanyName"/>
    </resultMap>
    <resultMap id="BaseNews" type="com.bbtong.Pojo.News">
        <id column="News_Id" jdbcType="INTEGER" property="newsId"/>
        <result column="News_User_Id" jdbcType="INTEGER" property="newsUserId"/>
        <result column="News_Entrust_Id" jdbcType="INTEGER" property="newsEntrustId"/>
        <result column="News_license_Number" jdbcType="INTEGER" property="newsLicenseNumber"/>
        <result column="News_Message" jdbcType="VARCHAR" property="newsMessage"/>
        <result column="News_State" jdbcType="INTEGER" property="newsState"/>
        <result column="State" jdbcType="INTEGER" property="state"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    User_Id, User_Name, User_Nickname, Insurance_Company_Name, Insurance_Company_Id, 
    User_Integrity, User_Member_State, `User_ Member_Begin`, `User_ Member_Finish`, User_Phone, 
    User_Identity_Card, User_Identity_Card_Front, User_Identity_Card_Verso, User_Satisfaction, 
    User_OpenId, User_State, User_Entrust_number, User_Order_numer, User_Entrust_Money, 
    User_order_Money, User_Number, User_Pact, User_Order_State, User_tietong, User_Address, 
    Tietong_Number, Intention_State, test_state
  </sql>
    <select id="selectByExample" parameterType="com.bbtong.Pojo.UserExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from bbt_user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limit != null">
            <if test="offset != null">
                limit ${offset}, ${limit}
            </if>
            <if test="offset == null">
                limit ${limit}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from bbt_user
        where User_Id = #{userId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from bbt_user
    where User_Id = #{userId,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.bbtong.Pojo.UserExample">
        delete from bbt_user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" keyColumn="User_Id" keyProperty="userId" parameterType="com.bbtong.Pojo.User"
            useGeneratedKeys="true">
    insert into bbt_user (User_Name, User_Nickname, Insurance_Company_Name, 
      Insurance_Company_Id, User_Integrity, User_Member_State, 
      `User_ Member_Begin`, `User_ Member_Finish`, User_Phone, 
      User_Identity_Card, User_Identity_Card_Front, 
      User_Identity_Card_Verso, User_Satisfaction, 
      User_OpenId, User_State, User_Entrust_number, 
      User_Order_numer, User_Entrust_Money, User_order_Money, 
      User_Number, User_Pact, User_Order_State, 
      User_tietong, User_Address, Tietong_Number, 
      Intention_State, test_state)
    values (#{userName,jdbcType=VARCHAR}, #{userNickname,jdbcType=VARCHAR}, #{insuranceCompanyName,jdbcType=VARCHAR}, 
      #{insuranceCompanyId,jdbcType=INTEGER}, #{userIntegrity,jdbcType=DOUBLE}, #{userMemberState,jdbcType=INTEGER}, 
      #{userMemberBegin,jdbcType=VARCHAR}, #{userMemberFinish,jdbcType=VARCHAR}, #{userPhone,jdbcType=VARCHAR}, 
      #{userIdentityCard,jdbcType=VARCHAR}, #{userIdentityCardFront,jdbcType=VARCHAR}, 
      #{userIdentityCardVerso,jdbcType=VARCHAR}, #{userSatisfaction,jdbcType=INTEGER}, 
      #{userOpenid,jdbcType=VARCHAR}, #{userState,jdbcType=INTEGER}, #{userEntrustNumber,jdbcType=INTEGER}, 
      #{userOrderNumer,jdbcType=INTEGER}, #{userEntrustMoney,jdbcType=DOUBLE}, #{userOrderMoney,jdbcType=DOUBLE}, 
      #{userNumber,jdbcType=VARCHAR}, #{userPact,jdbcType=INTEGER}, #{userOrderState,jdbcType=INTEGER}, 
      #{userTietong,jdbcType=INTEGER}, #{userAddress,jdbcType=VARCHAR}, #{tietongNumber,jdbcType=VARCHAR}, 
      #{intentionState,jdbcType=INTEGER}, #{testState,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" keyColumn="User_Id" keyProperty="userId" parameterType="com.bbtong.Pojo.User"
            useGeneratedKeys="true">
        insert into bbt_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userName != null">
                User_Name,
            </if>
            <if test="userNickname != null">
                User_Nickname,
            </if>
            <if test="insuranceCompanyName != null">
                Insurance_Company_Name,
            </if>
            <if test="insuranceCompanyId != null">
                Insurance_Company_Id,
            </if>
            <if test="userIntegrity != null">
                User_Integrity,
            </if>
            <if test="userMemberState != null">
                User_Member_State,
            </if>
            <if test="userMemberBegin != null">
                `User_ Member_Begin`,
            </if>
            <if test="userMemberFinish != null">
                `User_ Member_Finish`,
            </if>
            <if test="userPhone != null">
                User_Phone,
            </if>
            <if test="userIdentityCard != null">
                User_Identity_Card,
            </if>
            <if test="userIdentityCardFront != null">
                User_Identity_Card_Front,
            </if>
            <if test="userIdentityCardVerso != null">
                User_Identity_Card_Verso,
            </if>
            <if test="userSatisfaction != null">
                User_Satisfaction,
            </if>
            <if test="userOpenid != null">
                User_OpenId,
            </if>
            <if test="userState != null">
                User_State,
            </if>
            <if test="userEntrustNumber != null">
                User_Entrust_number,
            </if>
            <if test="userOrderNumer != null">
                User_Order_numer,
            </if>
            <if test="userEntrustMoney != null">
                User_Entrust_Money,
            </if>
            <if test="userOrderMoney != null">
                User_order_Money,
            </if>
            <if test="userNumber != null">
                User_Number,
            </if>
            <if test="userPact != null">
                User_Pact,
            </if>
            <if test="userOrderState != null">
                User_Order_State,
            </if>
            <if test="userTietong != null">
                User_tietong,
            </if>
            <if test="userAddress != null">
                User_Address,
            </if>
            <if test="tietongNumber != null">
                Tietong_Number,
            </if>
            <if test="intentionState != null">
                Intention_State,
            </if>
            <if test="testState != null">
                test_state,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="userNickname != null">
                #{userNickname,jdbcType=VARCHAR},
            </if>
            <if test="insuranceCompanyName != null">
                #{insuranceCompanyName,jdbcType=VARCHAR},
            </if>
            <if test="insuranceCompanyId != null">
                #{insuranceCompanyId,jdbcType=INTEGER},
            </if>
            <if test="userIntegrity != null">
                #{userIntegrity,jdbcType=DOUBLE},
            </if>
            <if test="userMemberState != null">
                #{userMemberState,jdbcType=INTEGER},
            </if>
            <if test="userMemberBegin != null">
                #{userMemberBegin,jdbcType=VARCHAR},
            </if>
            <if test="userMemberFinish != null">
                #{userMemberFinish,jdbcType=VARCHAR},
            </if>
            <if test="userPhone != null">
                #{userPhone,jdbcType=VARCHAR},
            </if>
            <if test="userIdentityCard != null">
                #{userIdentityCard,jdbcType=VARCHAR},
            </if>
            <if test="userIdentityCardFront != null">
                #{userIdentityCardFront,jdbcType=VARCHAR},
            </if>
            <if test="userIdentityCardVerso != null">
                #{userIdentityCardVerso,jdbcType=VARCHAR},
            </if>
            <if test="userSatisfaction != null">
                #{userSatisfaction,jdbcType=INTEGER},
            </if>
            <if test="userOpenid != null">
                #{userOpenid,jdbcType=VARCHAR},
            </if>
            <if test="userState != null">
                #{userState,jdbcType=INTEGER},
            </if>
            <if test="userEntrustNumber != null">
                #{userEntrustNumber,jdbcType=INTEGER},
            </if>
            <if test="userOrderNumer != null">
                #{userOrderNumer,jdbcType=INTEGER},
            </if>
            <if test="userEntrustMoney != null">
                #{userEntrustMoney,jdbcType=DOUBLE},
            </if>
            <if test="userOrderMoney != null">
                #{userOrderMoney,jdbcType=DOUBLE},
            </if>
            <if test="userNumber != null">
                #{userNumber,jdbcType=VARCHAR},
            </if>
            <if test="userPact != null">
                #{userPact,jdbcType=INTEGER},
            </if>
            <if test="userOrderState != null">
                #{userOrderState,jdbcType=INTEGER},
            </if>
            <if test="userTietong != null">
                #{userTietong,jdbcType=INTEGER},
            </if>
            <if test="userAddress != null">
                #{userAddress,jdbcType=VARCHAR},
            </if>
            <if test="tietongNumber != null">
                #{tietongNumber,jdbcType=VARCHAR},
            </if>
            <if test="intentionState != null">
                #{intentionState,jdbcType=INTEGER},
            </if>
            <if test="testState != null">
                #{testState,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.bbtong.Pojo.UserExample" resultType="java.lang.Long">
        select count(*) from bbt_user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update bbt_user
        <set>
            <if test="record.userId != null">
                User_Id = #{record.userId,jdbcType=INTEGER},
            </if>
            <if test="record.userName != null">
                User_Name = #{record.userName,jdbcType=VARCHAR},
            </if>
            <if test="record.userNickname != null">
                User_Nickname = #{record.userNickname,jdbcType=VARCHAR},
            </if>
            <if test="record.insuranceCompanyName != null">
                Insurance_Company_Name = #{record.insuranceCompanyName,jdbcType=VARCHAR},
            </if>
            <if test="record.insuranceCompanyId != null">
                Insurance_Company_Id = #{record.insuranceCompanyId,jdbcType=INTEGER},
            </if>
            <if test="record.userIntegrity != null">
                User_Integrity = #{record.userIntegrity,jdbcType=DOUBLE},
            </if>
            <if test="record.userMemberState != null">
                User_Member_State = #{record.userMemberState,jdbcType=INTEGER},
            </if>
            <if test="record.userMemberBegin != null">
                `User_ Member_Begin` = #{record.userMemberBegin,jdbcType=VARCHAR},
            </if>
            <if test="record.userMemberFinish != null">
                `User_ Member_Finish` = #{record.userMemberFinish,jdbcType=VARCHAR},
            </if>
            <if test="record.userPhone != null">
                User_Phone = #{record.userPhone,jdbcType=VARCHAR},
            </if>
            <if test="record.userIdentityCard != null">
                User_Identity_Card = #{record.userIdentityCard,jdbcType=VARCHAR},
            </if>
            <if test="record.userIdentityCardFront != null">
                User_Identity_Card_Front = #{record.userIdentityCardFront,jdbcType=VARCHAR},
            </if>
            <if test="record.userIdentityCardVerso != null">
                User_Identity_Card_Verso = #{record.userIdentityCardVerso,jdbcType=VARCHAR},
            </if>
            <if test="record.userSatisfaction != null">
                User_Satisfaction = #{record.userSatisfaction,jdbcType=INTEGER},
            </if>
            <if test="record.userOpenid != null">
                User_OpenId = #{record.userOpenid,jdbcType=VARCHAR},
            </if>
            <if test="record.userState != null">
                User_State = #{record.userState,jdbcType=INTEGER},
            </if>
            <if test="record.userEntrustNumber != null">
                User_Entrust_number = #{record.userEntrustNumber,jdbcType=INTEGER},
            </if>
            <if test="record.userOrderNumer != null">
                User_Order_numer = #{record.userOrderNumer,jdbcType=INTEGER},
            </if>
            <if test="record.userEntrustMoney != null">
                User_Entrust_Money = #{record.userEntrustMoney,jdbcType=DOUBLE},
            </if>
            <if test="record.userOrderMoney != null">
                User_order_Money = #{record.userOrderMoney,jdbcType=DOUBLE},
            </if>
            <if test="record.userNumber != null">
                User_Number = #{record.userNumber,jdbcType=VARCHAR},
            </if>
            <if test="record.userPact != null">
                User_Pact = #{record.userPact,jdbcType=INTEGER},
            </if>
            <if test="record.userOrderState != null">
                User_Order_State = #{record.userOrderState,jdbcType=INTEGER},
            </if>
            <if test="record.userTietong != null">
                User_tietong = #{record.userTietong,jdbcType=INTEGER},
            </if>
            <if test="record.userAddress != null">
                User_Address = #{record.userAddress,jdbcType=VARCHAR},
            </if>
            <if test="record.tietongNumber != null">
                Tietong_Number = #{record.tietongNumber,jdbcType=VARCHAR},
            </if>
            <if test="record.intentionState != null">
                Intention_State = #{record.intentionState,jdbcType=INTEGER},
            </if>
            <if test="record.testState != null">
                test_state = #{record.testState,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update bbt_user
        set User_Id = #{record.userId,jdbcType=INTEGER},
        User_Name = #{record.userName,jdbcType=VARCHAR},
        User_Nickname = #{record.userNickname,jdbcType=VARCHAR},
        Insurance_Company_Name = #{record.insuranceCompanyName,jdbcType=VARCHAR},
        Insurance_Company_Id = #{record.insuranceCompanyId,jdbcType=INTEGER},
        User_Integrity = #{record.userIntegrity,jdbcType=DOUBLE},
        User_Member_State = #{record.userMemberState,jdbcType=INTEGER},
        `User_ Member_Begin` = #{record.userMemberBegin,jdbcType=VARCHAR},
        `User_ Member_Finish` = #{record.userMemberFinish,jdbcType=VARCHAR},
        User_Phone = #{record.userPhone,jdbcType=VARCHAR},
        User_Identity_Card = #{record.userIdentityCard,jdbcType=VARCHAR},
        User_Identity_Card_Front = #{record.userIdentityCardFront,jdbcType=VARCHAR},
        User_Identity_Card_Verso = #{record.userIdentityCardVerso,jdbcType=VARCHAR},
        User_Satisfaction = #{record.userSatisfaction,jdbcType=INTEGER},
        User_OpenId = #{record.userOpenid,jdbcType=VARCHAR},
        User_State = #{record.userState,jdbcType=INTEGER},
        User_Entrust_number = #{record.userEntrustNumber,jdbcType=INTEGER},
        User_Order_numer = #{record.userOrderNumer,jdbcType=INTEGER},
        User_Entrust_Money = #{record.userEntrustMoney,jdbcType=DOUBLE},
        User_order_Money = #{record.userOrderMoney,jdbcType=DOUBLE},
        User_Number = #{record.userNumber,jdbcType=VARCHAR},
        User_Pact = #{record.userPact,jdbcType=INTEGER},
        User_Order_State = #{record.userOrderState,jdbcType=INTEGER},
        User_tietong = #{record.userTietong,jdbcType=INTEGER},
        User_Address = #{record.userAddress,jdbcType=VARCHAR},
        Tietong_Number = #{record.tietongNumber,jdbcType=VARCHAR},
        Intention_State = #{record.intentionState,jdbcType=INTEGER},
        test_state = #{record.testState,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.bbtong.Pojo.User">
        update bbt_user
        <set>
            <if test="userName != null">
                User_Name = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="userNickname != null">
                User_Nickname = #{userNickname,jdbcType=VARCHAR},
            </if>
            <if test="insuranceCompanyName != null">
                Insurance_Company_Name = #{insuranceCompanyName,jdbcType=VARCHAR},
            </if>
            <if test="insuranceCompanyId != null">
                Insurance_Company_Id = #{insuranceCompanyId,jdbcType=INTEGER},
            </if>
            <if test="userIntegrity != null">
                User_Integrity = #{userIntegrity,jdbcType=DOUBLE},
            </if>
            <if test="userMemberState != null">
                User_Member_State = #{userMemberState,jdbcType=INTEGER},
            </if>
            <if test="userMemberBegin != null">
                `User_ Member_Begin` = #{userMemberBegin,jdbcType=VARCHAR},
            </if>
            <if test="userMemberFinish != null">
                `User_ Member_Finish` = #{userMemberFinish,jdbcType=VARCHAR},
            </if>
            <if test="userPhone != null">
                User_Phone = #{userPhone,jdbcType=VARCHAR},
            </if>
            <if test="userIdentityCard != null">
                User_Identity_Card = #{userIdentityCard,jdbcType=VARCHAR},
            </if>
            <if test="userIdentityCardFront != null">
                User_Identity_Card_Front = #{userIdentityCardFront,jdbcType=VARCHAR},
            </if>
            <if test="userIdentityCardVerso != null">
                User_Identity_Card_Verso = #{userIdentityCardVerso,jdbcType=VARCHAR},
            </if>
            <if test="userSatisfaction != null">
                User_Satisfaction = #{userSatisfaction,jdbcType=INTEGER},
            </if>
            <if test="userOpenid != null">
                User_OpenId = #{userOpenid,jdbcType=VARCHAR},
            </if>
            <if test="userState != null">
                User_State = #{userState,jdbcType=INTEGER},
            </if>
            <if test="userEntrustNumber != null">
                User_Entrust_number = #{userEntrustNumber,jdbcType=INTEGER},
            </if>
            <if test="userOrderNumer != null">
                User_Order_numer = #{userOrderNumer,jdbcType=INTEGER},
            </if>
            <if test="userEntrustMoney != null">
                User_Entrust_Money = #{userEntrustMoney,jdbcType=DOUBLE},
            </if>
            <if test="userOrderMoney != null">
                User_order_Money = #{userOrderMoney,jdbcType=DOUBLE},
            </if>
            <if test="userNumber != null">
                User_Number = #{userNumber,jdbcType=VARCHAR},
            </if>
            <if test="userPact != null">
                User_Pact = #{userPact,jdbcType=INTEGER},
            </if>
            <if test="userOrderState != null">
                User_Order_State = #{userOrderState,jdbcType=INTEGER},
            </if>
            <if test="userTietong != null">
                User_tietong = #{userTietong,jdbcType=INTEGER},
            </if>
            <if test="userAddress != null">
                User_Address = #{userAddress,jdbcType=VARCHAR},
            </if>
            <if test="tietongNumber != null">
                Tietong_Number = #{tietongNumber,jdbcType=VARCHAR},
            </if>
            <if test="intentionState != null">
                Intention_State = #{intentionState,jdbcType=INTEGER},
            </if>
            <if test="testState != null">
                test_state = #{testState,jdbcType=INTEGER},
            </if>
        </set>
        where User_Id = #{userId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.bbtong.Pojo.User">
    update bbt_user
    set User_Name = #{userName,jdbcType=VARCHAR},
      User_Nickname = #{userNickname,jdbcType=VARCHAR},
      Insurance_Company_Name = #{insuranceCompanyName,jdbcType=VARCHAR},
      Insurance_Company_Id = #{insuranceCompanyId,jdbcType=INTEGER},
      User_Integrity = #{userIntegrity,jdbcType=DOUBLE},
      User_Member_State = #{userMemberState,jdbcType=INTEGER},
      `User_ Member_Begin` = #{userMemberBegin,jdbcType=VARCHAR},
      `User_ Member_Finish` = #{userMemberFinish,jdbcType=VARCHAR},
      User_Phone = #{userPhone,jdbcType=VARCHAR},
      User_Identity_Card = #{userIdentityCard,jdbcType=VARCHAR},
      User_Identity_Card_Front = #{userIdentityCardFront,jdbcType=VARCHAR},
      User_Identity_Card_Verso = #{userIdentityCardVerso,jdbcType=VARCHAR},
      User_Satisfaction = #{userSatisfaction,jdbcType=INTEGER},
      User_OpenId = #{userOpenid,jdbcType=VARCHAR},
      User_State = #{userState,jdbcType=INTEGER},
      User_Entrust_number = #{userEntrustNumber,jdbcType=INTEGER},
      User_Order_numer = #{userOrderNumer,jdbcType=INTEGER},
      User_Entrust_Money = #{userEntrustMoney,jdbcType=DOUBLE},
      User_order_Money = #{userOrderMoney,jdbcType=DOUBLE},
      User_Number = #{userNumber,jdbcType=VARCHAR},
      User_Pact = #{userPact,jdbcType=INTEGER},
      User_Order_State = #{userOrderState,jdbcType=INTEGER},
      User_tietong = #{userTietong,jdbcType=INTEGER},
      User_Address = #{userAddress,jdbcType=VARCHAR},
      Tietong_Number = #{tietongNumber,jdbcType=VARCHAR},
      Intention_State = #{intentionState,jdbcType=INTEGER},
      test_state = #{testState,jdbcType=INTEGER}
    where User_Id = #{userId,jdbcType=INTEGER}
  </update>

    <!--第一步通过用户的手机查询对应的信息-->
    <select id="PutUser" parameterType="string" resultMap="BaseResultMap">
    select * from  bbt_user where User_Phone=#{userPhone}
  </select>

    <!--通过保险公司的id 查询保险公司的名称-->
    <select id="insuranceCompanyName" parameterType="int" resultType="string">
        select Insurance_Company_Name from  bbt_insurance_company where Insurance_Company_Id=#{insuranceCompanyId}
    </select>

    <!--注册用户-->
    <insert id="PostUser" parameterType="postUser">
    insert into bbt_user(user_name, User_Nickname,insurance_company_id, Insurance_Company_Name,user_phone, user_identity_card, user_number, user_tietong, user_address)values (#{userName},#{userName},#{insuranceCompanyId},#{insuranceCompanyName},#{userPhone},#{userIdentityCard},#{userNumber},#{userTietong},#{userAddress})
  </insert>

    <!--第一步 先查询好友的条数-->
    <select id="GetFriendNumber" parameterType="int" resultType="int">
        select count(1) from bbt_friend where User_Id=#{userId}
    </select>

    <!--第二步 查询对应好友的信息-->
    <select id="GetFriend" parameterType="int" resultMap="BaseFriend">
        select * from bbt_friend where User_Id=#{userId}
    </select>

    <!--查看个人资料的方法-->
    <select id="GetUser" parameterType="int" resultMap="BaseResultMap">
        select * from bbt_user where  User_Id=#{userId}
    </select>

    <!--用户修改自己的个人资料-->
    <update id="UserRedact" parameterType="postUser">
        update bbt_user
        <set>
            <if test="userName != null">
                User_Name=#{userName},
            </if>
            <if test="insuranceCompanyId != null">
                Insurance_Company_Id=#{insuranceCompanyId},
            </if>
            <if test="userPhone != null">
                User_Phone=#{userPhone},
            </if>
            <if test="userIdentityCard != null">
                User_Identity_Card=#{userIdentityCard},
            </if>
            <if test="userNumber != null">
                User_Number=#{userNumber},
            </if>
            <if test="userAddress != null">
                User_Address=#{userAddress},
            </if>
            <if test="userTietong != null">
                User_tietong=#{userTietong},
            </if>
        </set>
        where User_Id=#{userId}
    </update>

    <!--用户查看自己的消息-->
    <select id="SelectNews" parameterType="map" resultMap="BaseNews">
        select  * from  bbt_news where  News_User_Id=#{userId} and News_State!=2 order by News_State
    </select>

    <!--用户将消息从未读的状态修改成已读的状态-->
    <update id="delectNewsOne" parameterType="map">
        update bbt_news
        <set>
            News_State=1,
        </set>
        where News_User_Id=#{userId} and News_Id=#{newsId}
    </update>

    <!--用户删除自己的消息-->
    <update id="delectNewsTwo" parameterType="map">
        update bbt_news
        <set>
            News_State=2,
        </set>
        where News_User_Id=#{userId} and News_Id=#{newsId}
    </update>
</mapper>